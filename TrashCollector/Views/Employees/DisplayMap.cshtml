@model TrashCollector.Models.CustomersModel

@{
    ViewData["Title"] = "Display Customer Map";
    double lat = Model.Lattitude;
    double lng = Model.Longitude;
}

    <h4>Displaying Map For Customer @Html.DisplayFor(model => model.firstName)  @Html.DisplayFor(model => model.lastName)</h4>

<div>
   
    <hr />

</div>
<div>
   
    <a asp-action="Index">Back to List</a>
</div>
<!DOCTYPE html>
<html>
<head>
    <style>
        /* Set the size of the div element that contains the map */
        #map {
            height: 400px; /* The height is 400 pixels */
            width: 100%; /* The width is the width of the web page */
        }
    </style>
</head>
<body>
    
    <!--The div element for the map -->
    <div id="map"></div>
    <script>
// Initialize and add the map
function initMap() {
  // The location of Uluru
    let lat = @lat;
    let lng = @lng;
    
  var uluru = {lat: -29.344, lng: 123.036};
    //var uluru = { lat: lat, lng: lng };
    uluru.lat = lat;
    uluru.lng = lng;
    
  // The map, centered at Uluru
    var map = new google.maps.Map(
        document.getElementById('map'), { zoom: 4, center: uluru });
  // The marker, positioned at Uluru
  var marker = new google.maps.Marker({position: uluru, map: map});
}
    </script>
    <!--Load the API from the specified URL
    * The async attribute allows the browser to render the page while the API loads
    * The key parameter will contain your own API key (which is not needed for this tutorial)
    * The callback parameter executes the initMap() function
    -->
    <script async defer
            src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAh0UnA6dB0NIZVjMy2BCMjXd7QmR3GON4&callback=initMap">
    </script>
</body>
</html>